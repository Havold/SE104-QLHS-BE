// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      String   @default("admin")
}

model Student {
  id       Int    @id @default(autoincrement())
  username String @unique

  email     String   @unique
  phone     String   @unique
  password  String
  img       String?
  fullName  String
  sex       Sex
  birth     DateTime
  address   String?
  createdAt DateTime @default(now())

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  studentClasses StudentClass[]
  DT_scoreBoards DT_ScoreBoard[]
  results        Result[]
  attendance     Attendance[]
}

model SchoolYear {
  id        Int      @id @default(autoincrement())
  value     Int      @unique
  createdAt DateTime @default(now())

  ClassSchoolYear ClassSchoolYear[]
  scoreBoards     ScoreBoard[]
  results         Result[]
  reportsSubject  ReportSubject[]
  reportsSemester ReportSemester[]
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  gradeId Int
  grade   Grade @relation(fields: [gradeId], references: [id], onDelete: Cascade)

  classSchoolYear ClassSchoolYear[]
  ScoreBoard      ScoreBoard[]
}

model Grade {
  id        Int      @id @default(autoincrement())
  level     Int      @unique
  createdAt DateTime @default(now())

  classes Class[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  scoreBoards    ScoreBoard[]
  dtResults      DT_Result[]
  reportsSubject ReportSubject[]
}

model Semester {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  scoreBoards     ScoreBoard[]
  reportsSubject  ReportSubject[]
  reportsSemester ReportSemester[]
}

model TypeOfExam {
  id   Int    @id @default(autoincrement())
  name String

  scoreBoards ScoreBoard[]
}

model ScoreBoard {
  id Int @id @default(autoincrement())

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  classId Int
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  typeOfExamId Int
  typeOfExam   TypeOfExam @relation(fields: [typeOfExamId], references: [id], onDelete: Cascade)

  dtScoreBoards DT_ScoreBoard[]
}

model DT_ScoreBoard {
  score Float?

  scoreBoardId Int
  scoreBoard   ScoreBoard @relation(fields: [scoreBoardId], references: [id], onDelete: Cascade)

  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  dtResults DT_Result[]

  @@id([scoreBoardId, studentId])
}

model Result {
  id       Int    @id @default(autoincrement())
  avgSemI  Float? // Average score for semester I
  avgSemII Float? // Average score for semester II

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  dtResults DT_Result[]
}

model DT_Result {
  avgScore Float

  resultId Int
  result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  scoreBoardId Int
  studentId    Int
  dtScoreBoard DT_ScoreBoard @relation(fields: [scoreBoardId, studentId], references: [scoreBoardId, studentId], onDelete: Cascade)

  @@id([resultId, subjectId, scoreBoardId, studentId])
}

model ReportSubject {
  id Int @id @default(autoincrement())

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  dtReportsSubject DT_ReportSubject[]
}

model DT_ReportSubject {
  capacity     Int
  numberPassed Int
  percentage   Float

  reportSubjectId Int
  reportSubject   ReportSubject @relation(fields: [reportSubjectId], references: [id], onDelete: Cascade)

  classSchoolYearId Int
  classSchoolYear   ClassSchoolYear @relation(fields: [classSchoolYearId], references: [id], onDelete: Cascade)

  @@id([reportSubjectId, classSchoolYearId])
}

model ReportSemester {
  id Int @id @default(autoincrement())

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  dtReportsSemester DT_ReportSemester[]
}

model DT_ReportSemester {
  capacity     Int
  numberPassed Int
  percentage   Float

  reportSemesterId Int
  reportSemester   ReportSemester @relation(fields: [reportSemesterId], references: [id], onDelete: Cascade)

  classSchoolYearId Int
  classSchoolYear   ClassSchoolYear @relation(fields: [classSchoolYearId], references: [id], onDelete: Cascade)

  @@id([reportSemesterId, classSchoolYearId])
}

model ClassSchoolYear {
  id       Int @id @default(autoincrement())
  capacity Int @default(0)

  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  classId Int?
  class   Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  studentsClasses StudentClass[]

  DT_reportsSubject  DT_ReportSubject[]
  DT_reportsSemester DT_ReportSemester[]

  events        Event[]
  announcements Announcement[]
}

model StudentClass {
  id Int @id @default(autoincrement())

  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  classSchoolYearId Int
  classSchoolYear   ClassSchoolYear @relation(fields: [classSchoolYearId], references: [id], onDelete: Cascade)
}

model Parameter {
  id    Int    @id @default(autoincrement())
  name  String
  value Float
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  desc      String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())

  classesSchoolYear ClassSchoolYear[]
}

model Announcement {
  id    Int      @id @default(autoincrement())
  title String
  desc  String
  date  DateTime

  classesSchoolYear ClassSchoolYear[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  authorities Authority[]
  students    Student[]
}

model Authority {
  id   Int    @id @default(autoincrement())
  name String @unique

  roles Role[]
}

enum Sex {
  Male
  Female
}

enum ScheduleDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}
